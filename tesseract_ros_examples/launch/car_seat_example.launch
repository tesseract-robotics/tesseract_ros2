<?xml version="1.0"?>
<launch>
 <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>
  <arg name="plotting" default="true"/>
  <arg name="rviz" default="true"/>
  <arg name="ifopt" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="testing" default="false"/>

  <!-- Load universal robot description format (URDF) -->
  <let name="robot_description_file" value="$(command 'xacro $(find-pkg-share tesseract_support)/urdf/car_seat_demo.xacro')" />

  <!-- The semantic description that corresponds to the URDF -->
  <let name="robot_description_semantic_file" value="$(command 'cat $(find-pkg-share tesseract_support)/urdf/car_seat_demo.srdf')" />

  <group unless="$(var testing)">
    <!-- If needed, broadcast static tf for robot root -->
    <node pkg="tf2_ros" exec="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world base_link" />

    <node pkg="tesseract_ros_examples" exec="tesseract_ros_examples_car_seat_example_node" name="tesseract_ros_examples_car_seat_example_node" output="screen">
      <param name="plotting" type="bool" value="$(var plotting)"/>
      <param name="rviz" type="bool" value="$(var rviz)"/>
      <param name="ifopt" type="bool" value="$(var ifopt)"/>
      <param name="debug" type="bool" value="$(var debug)"/>
      <param name="$(var robot_description)" value="$(var robot_description_file)" type="str"/>
      <param name="$(var robot_description)_semantic" value="$(var robot_description_semantic_file)" type="str"/>
    </node>

    <!-- Launch visualization -->
    <node pkg="rviz2" exec="rviz2" name="tesseract_ros_examples_car_seat_example_rviz"
        args="-d $(find-pkg-share tesseract_ros_examples)/config/examples.rviz" output="screen">
      <param name="$(var robot_description)" value="$(var robot_description_file)" type="str"/>
      <param name="$(var robot_description)_semantic" value="$(var robot_description_semantic_file)" type="str"/>
    </node>
  </group>
</launch>
